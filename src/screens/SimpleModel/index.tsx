import React, { useContext, useEffect, useState } from "react";
import {
  View,
  Text,
  TextInput,
  SafeAreaView,
  ScrollView,
  TouchableOpacity,
  ToastAndroid,
  ActivityIndicator,
  BackHandler,
  Alert
} from "react-native";
import { Picker } from "@react-native-picker/picker";
import {
  DateTimePickerAndroid,
  DateTimePickerEvent,
} from "@react-native-community/datetimepicker";
import { TextInputMask } from "react-native-masked-text";
import RNHTMLtoPDF from "react-native-html-to-pdf";
import { useNavigation } from "@react-navigation/native";

import { styles } from "./styles";

import { convertHouseType, convertMonthName, convertRg, convertState } from "../../utils/converts";
import FileContext from "../../contexts/file";

type SimpleModelProps = {
  data: {
    locatorName: string;
    locatorCpf: string;
    locatorRg: string;
    tenantName: string;
    tenantCpf: string;
    tenantRg: string;
    houseType: string;
    houseStreet: string;
    houseNumber: string;
    houseNeighborhood: string;
    houseCity: string;
    houseState: string;
    housePayment: string;
    housePaymentDay: string;
    startLocationDate: string;
    endLocationDate: string;
    locationTimeMonth: string;
  };
};

export default function SimpleModel() {
  const [date, setDate] = useState<Date>(
    new Date(
      new Date().getFullYear(),
      new Date().getMonth(),
      new Date().getDate()
    )
  );

  //INFORMAÇÕES DO LOCADOR
  const [locatorName, setLocatorName] = useState<string>();
  const [locatorCpf, setLocatorCpf] = useState<string>();
  const [locatorRg, setLocatorRg] = useState<string>();
  const [locatorAddress, setLocatorAddress] = useState<string>();

  //INFORMAÇÕES DO LOCATÁRIO
  const [tenantName, setTenantName] = useState<string>();
  const [tenantCpf, setTenantCpf] = useState<string>();
  const [tenantRg, setTenantRg] = useState<string>();

  //INFORMAÇÕES DO IMÓVEL
  const [houseStreet, setHouseStreet] = useState<string>();
  const [houseNumber, setHouseNumber] = useState<string>();
  const [houseNeighborhood, setHouseNeighborhood] = useState<string>();
  const [houseCity, setHouseCity] = useState<string>();
  const [houseState, setHouseState] = useState<string>('mg');

  //INFORMAÇÕES DE VALOR DO ALUGUEL
  const [houseType, setHouseType] = useState<string>('casa');
  const [housePayment, setHousePayment] = useState<string>();
  const [housePaymentDay, setHousePaymentDay] = useState<number>(0);

  //INFORMAÇÕES DO TEMPO DE LOCAÇÃO
  const [monthTime, setMonthTime] = useState<number>(0);
  const [previewDate, setPreviewDate] = useState<string>();

  const [ isLoading, setIsLoading] = useState<boolean>(false);

  const { pdfUri, setPdfUri, setPdfName } = useContext(FileContext);

  const navigation = useNavigation();

  useEffect(() => {
    const backAct = () => {
      Alert.alert('Voltar', 'Tem certeza que deseja voltar? Você perderá as alterações feitas', [
        {
          text: 'Cancelar',
          onPress: () => null,
        },
        {
          text: 'Voltar',
          onPress: () => navigation.canGoBack() ? navigation.goBack() : null
        }
      ]);
      return true;
    };

    
    BackHandler.addEventListener('hardwareBackPress', backAct);
  }, []);

  const onChange = (
    event: DateTimePickerEvent,
    selectedDate: Date | undefined
  ) => {
    const currentDate = selectedDate as React.SetStateAction<Date>;
    setDate(currentDate);
    if (monthTime != undefined && monthTime > 0 && selectedDate != undefined) {
      setPreviewDate(
        new Date(
          new Date(selectedDate).setMonth(selectedDate.getMonth() + monthTime)
        ).toLocaleDateString("pt-BR")
      );
    }
  };

  const showDatePicker = () => {
    DateTimePickerAndroid.open({
      value: date,
      onChange,
      mode: "date",
      is24Hour: true,
    });
  };

  const onChangeMonthTime = (value: string) => {
    const numberValue = Number(value);
    setMonthTime(numberValue);
    setPreviewDate(
      new Date(new Date(date).setMonth(date.getMonth() + numberValue)).toLocaleDateString("pt-BR")
    );
  };

  async function handleCreatePDF() {
    setIsLoading(true);
    let options = {
      html: `
      <html>
      <!-- Created by Leoni Melo (https://github.com/leonimeloo) -->
      <!-- Generated by Microsoft Word -->
      
      <head>
        <meta http-equiv=Content-Type content="text/html;">
        <meta charset="utf-8" />
        <meta name="generator" content="leonimeloo" />
        <style>
          <!--
          /* Font Definitions */
          /*!
          * HMTL & CSS BASE GENERATED BY MICROSOFT WORD
          * EDITED BY LEONI MELO (https://github.com/leonimeloo)
          * Copyright 2023 Leoni Melo <@leonimeloo on all social medias> 
          */
          @font-face {
            font-family: "Cambria Math";
            panose-1: 2 4 5 3 5 4 6 3 2 4;
          }
      
          @font-face {
            font-family: Calibri;
            panose-1: 2 15 5 2 2 2 4 3 2 4;
          }
      
          /* Style Definitions */
          p.MsoNormal,
          li.MsoNormal,
          div.MsoNormal {
            margin-top: 0cm;
            margin-right: 0cm;
            margin-bottom: 8.0pt;
            margin-left: 0cm;
            line-height: 110%;
            font-size: 11.0pt;
            font-family: "Calibri", sans-serif;
          }
      
          .MsoChpDefault {
            font-family: "Calibri", sans-serif;
          }
      
          .MsoPapDefault {
            margin-bottom: 8.0pt;
            line-height: 110%;
          }
      
          @page WordSection1 {
            size: 595.3pt 841.9pt;
          }
      
          div.WordSection1 {
            page: WordSection1;
          }
          -->
        </style>
      
      </head>
      
      <body lang=EN-US style='word-wrap:break-word'>
      
        <div class=WordSection1>
      
          <p class=MsoNormal align=center style='text-align:center'><b><u
                style="text-decoration: underline;text-decoration-color: black;text-decoration-thickness: 3px"><span
                  lang=PT-BR style='font-size:12.0pt;line-height:107%;font-family:"Arial",sans-serif'>CONTRATO
                  DE LOCAÇÃO</span></u></b></p>
      
          <p class=MsoNormal style='margin-bottom:2.0pt'><span lang=PT-BR style='font-family:"Arial",sans-serif'>Os
              signatários que contratam nas
              qualidades indicadas neste contrato, sendo considerado como <b>LOCADOR</b> o(a)
              Sr(a). <b><u
                  style="text-decoration: underline;text-decoration-color: black;text-decoration-thickness: 2px">${locatorName?.toUpperCase()}</u></b>, Brasileiro(a), residente
              e domiciliado(a) na ${locatorAddress}, portador(a) do CPF:
              ${locatorCpf} e Identidade n° ${convertRg(locatorRg as string)} e <b>LOCATÁRIO</b> o Sr(a). <b><u
                  style="text-decoration: underline;text-decoration-color: black;text-decoration-thickness: 2px">${tenantName?.toUpperCase()}</u></b>, Brasileiro(a), portador do ${tenantCpf} e
              Identidade n° ${convertRg(tenantRg as string)}. Fazem entre si, ajustada, a presente locação, mediante
              as seguintes cláusulas e condições:</span></p>
      
          <p class=MsoNormal style='margin-bottom:2.0pt'><b><span lang=PT-BR
                style='font-family:"Arial",sans-serif'>Cláusula I- Objeto da Locação:</span></b></p>
      
          <p class=MsoNormal style='margin-bottom:2.0pt'><span lang=PT-BR style='font-family:"Arial",sans-serif'>Um ${convertHouseType(houseType)} situado à ${houseStreet}
              n° ${houseNumber} – Bairro ${houseNeighborhood} - ${houseCity} - ${houseState?.toUpperCase()}</span></p>
      
          <p class=MsoNormal style='margin-bottom:2.0pt'><b><span lang=PT-BR
                style='font-family:"Arial",sans-serif'>Cláusula II - Valor Mensal da Locação</span></b><span
              lang=PT-BR style='font-family:"Arial",sans-serif'>:</span></p>
      
          <p class=MsoNormal style='margin-bottom:2.0pt'><span lang=PT-BR style='font-family:"Arial",sans-serif'>O valor
              mensal da locação será de <b>${housePayment} REAIS</b> durante os meses subsequentes, devendo ser pago
              até o dia <b>${housePaymentDay}</b> de cada mês subsequente ao vencido. Em caso de atraso de pagamento
              do aluguel o <b>LOCADOR</b> poderá rescindir o contrato, com direito a despejo,
              por falta de compromisso das cláusulas e condições.</span></p>
      
          <p class=MsoNormal style='margin-bottom:2.0pt'><b><span lang=PT-BR
                style='font-family:"Arial",sans-serif'>Clausula III - Prazo da Locação:</span></b></p>
      
          <p class=MsoNormal style='margin-top:0cm;margin-right:0cm;margin-bottom:2.0pt;
      margin-left:72.0pt'><span lang=PT-BR style='font-family:"Arial",sans-serif'>Início:
              ${date.toLocaleDateString('pt-BR')}</span></p>
      
          <p class=MsoNormal style='margin-top:0cm;margin-right:0cm;margin-bottom:2.0pt;
      margin-left:72.0pt'><span lang=PT-BR style='font-family:"Arial",sans-serif'>Término:
              ${previewDate} (<b>${monthTime} meses</b>)</span></p>
      
          <p class=MsoNormal style='margin-bottom:2.0pt'><span lang=PT-BR style='font-family:"Arial",sans-serif'>Sendo
              permitida a rescisão do contrato
              pelo <b>LOCADOR</b> antes do prazo de locação por motivos específicos ou se o <b>LOCATÁRIO</b>
              não cumprir as cláusulas impostas nesse contrato.</span></p>
      
          <p class=MsoNormal style='margin-bottom:2.0pt'><b><span lang=PT-BR
                style='font-family:"Arial",sans-serif'>Cláusula IV - Tributos e demais
                encargos:</span></b></p>
      
          <p class=MsoNormal style='margin-bottom:2.0pt'><span lang=PT-BR style='font-family:"Arial",sans-serif'>Obriga-se
              o <b>LOCATÁRIO</b> além do
              pagamento do aluguel a satisfazer, ao pagamento, no seu devido prazo, por sua
              conta exclusiva do consumo de água, luz, telefone, esgoto e etc, devendo
              apresentar o comprovante de pagamento ao <b>LOCADOR</b> assim que o mesmo for
              realizado.</span></p>
      
          <p class=MsoNormal style='margin-bottom:2.0pt'><b><span lang=PT-BR
                style='font-family:"Arial",sans-serif'>Cláusula V- Obrigações gerais:</span></b></p>
      
          <p class=MsoNormal style='margin-bottom:2.0pt'><span lang=PT-BR style='font-family:"Arial",sans-serif'>O
              <b>LOCATÁRIO</b> declara ter procedido
              a vistoria do imóvel locado recebendo-o em perfeito estado de conservação
              obrigando-se a:</span></p>
      
          <p class=MsoNormal style='margin-bottom:2.0pt'><span lang=PT-BR style='font-family:"Arial",sans-serif'>a) Manter
              o objeto da locação no mais
              perfeito estado de conservação e limpeza, para assim restituir ao <b>LOCADOR</b>,
              quando finda ou rescindida a locação, correndo por sua conta exclusiva as
              despesas necessárias para esse fim.</span></p>
      
          <p class=MsoNormal style='margin-bottom:2.0pt'><span lang=PT-BR style='font-family:"Arial",sans-serif'>b) Não
              fazer instalação, adaptação, obra
              ou bem feitoria, sem prévia autorização por escrita do <b>LOCADOR</b>.</span></p>
      
          <p class=MsoNormal style='margin-bottom:2.0pt'><span lang=PT-BR style='font-family:"Arial",sans-serif'>c) Não
              transferir este contrato, não
              sublocar, não ceder ou emprestar, sobre qualquer pretexto e de igual forma não
              alterar a destinação da locação.</span></p>
      
          <p class=MsoNormal style='margin-bottom:2.0pt'><span lang=PT-BR style='font-family:"Arial",sans-serif'>d)
              Encaminhar o <b>LOCADOR</b> todas as
              notificações, avisos ou intimações dos poderes públicos que forem entregues no
              imóvel, sob pena de responder pelas multas, correção monetária e penalidades
              decorrentes do atraso no pagamento ou satisfação no cumprimento de
              determinações por aqueles</span></p>
      
          <p class=MsoNormal style='margin-bottom:2.0pt'><span lang=PT-BR
              style='font-family:"Arial",sans-serif'>poderes.</span></p>
      
          <p class=MsoNormal style='margin-bottom:2.0pt'><span lang=PT-BR style='font-family:"Arial",sans-serif'>e) Findo
              o prazo deste contrato, por
              ocasião da entrega das chaves, o <b>LOCADOR</b> mandará fazer uma vistoria no
              imóvel, a fim de verificar se o mesmo se acha nas condições em que foi
              recebido, pelo <b>LOCATÁRIO</b>.</span></p>
      
          <p class=MsoNormal style='margin-bottom:2.0pt'><b><span lang=PT-BR
                style='font-family:"Arial",sans-serif'>Cláusula VI - Cláusula Penal:</span></b></p>
      
          <p class=MsoNormal style='margin-bottom:2.0pt'><span lang=PT-BR style='font-family:"Arial",sans-serif'>O
              <b>LOCADOR</b> e <b>LOCATÁRIO</b> obrigam-se
              a respeitar o presente contrato em todas as suas cláusulas e condições e, por
              estarem justos e contratados, assinam o presente instrumento em 02 vias de
              igual forma e teor.</span></p>
      
          <p class=MsoNormal style='margin-bottom:2.0pt'><b><u><span lang=PT-BR
                  style='font-size:14.0pt;line-height:107%;font-family:"Arial",sans-serif'><span
                    style='text-decoration:none'>&nbsp;</span></span></u></b></p>
      
          <p class=MsoNormal align=center style='margin-bottom:2.0pt;text-align:center'><span lang=PT-BR
              style='font-family:"Arial",sans-serif'>${houseCity}, ${convertState(houseState)} - ${new Date().getDate()} de ${convertMonthName(new Date().getMonth() + 1)} de ${new Date().getFullYear()}</span></p>
      
          <p class=MsoNormal align=center style='margin-bottom:0cm;text-align:center'>
      
            <u style="text-decoration: overline;text-decoration-color: black;text-decoration-thickness: 2px">
              <p style="float: left;margin-top: 60px">${locatorName?.toUpperCase()}</p>
            </u>
      
          <p style="float: right;margin-top: 60px"><u
              style="text-decoration: overline;text-decoration-color: black;text-decoration-thickness: 2px">${tenantName?.toUpperCase()}</u></p>
      
        </div>
      
      </body>
      
      </html>`,
      fileName: `Contrato de ${tenantName}`,
      directory: 'Contratos',
    };

    let file = await RNHTMLtoPDF.convert(options);
    await setPdfUri(file.filePath as string);
    await setPdfName(`Contrato de ${tenantName}`);
    ToastAndroid.show(`Seu contrato foi criado com sucesso em Documentos/Contratos`, ToastAndroid.LONG);
    navigation.navigate('Share' as never);
  }


  return (
    <ScrollView>
      <View style={styles.container}>
        <View style={styles.header}>
          <Text style={styles.headerTxt}>Contrato Simples</Text>
        </View>

        <View style={styles.content}>
          <Text style={styles.infoTxt}>Digite os dados requeridos:</Text>

          <SafeAreaView>
            <Text style={styles.label}>LOCADOR / DONO: </Text>
            <TextInput
              style={styles.input}
              value={locatorName}
              onChangeText={(txt) => setLocatorName(txt)}
            />

            <Text style={styles.label}>CPF DO LOCADOR / DONO: </Text>
            <TextInputMask
              type="cpf"
              style={styles.input}
              value={locatorCpf}
              onChangeText={(txt) => setLocatorCpf(txt)}
            />

            <Text style={styles.label}>N° IDENTIDADE DO LOCADOR / DONO: </Text>
            <TextInputMask
              type="custom"
              keyboardType="numeric"
              style={styles.input}
              options={{ 
                mask: '999999999' 
              }}
              value={locatorRg}
              onChangeText={(txt) => setLocatorRg(txt)}
            />

            <Text style={styles.label}>ENDEREÇO DO LOCADOR: (coloque endereço completo)</Text>
            <TextInput
              style={styles.input}
              value={locatorAddress}
              onChangeText={(txt) => setLocatorAddress(txt)}
            />
            
            <View style={styles.divider} />

            <Text style={styles.label}>LOCATÁRIO / INQUILINO: </Text>
            <TextInput
              style={styles.input}
              value={tenantName}
              onChangeText={(txt) => setTenantName(txt)}
            />

            <Text style={styles.label}>CPF DO LOCATÁRIO / INQUILINO: </Text>
            <TextInputMask
              type="cpf"
              style={styles.input}
              value={tenantCpf}
              onChangeText={(txt) => setTenantCpf(txt)}
            />

            <Text style={styles.label}>
              N° IDENTIDADE DO LOCATÁRIO / INQUILINO:{" "}
            </Text>
            <TextInputMask
              type="custom"
              keyboardType="numeric"
              style={styles.input}
              options={{ 
                mask: '999999999' 
              }}
              value={tenantRg}
              onChangeText={(txt) => setTenantRg(txt)}
            />

            <View style={styles.divider} />

            <Text style={styles.label}>RUA DO IMÓVEL: </Text>
            <TextInput
              style={styles.input}
              value={houseStreet}
              onChangeText={(txt) => setHouseStreet(txt)}
            />

            <Text style={styles.label}>N° DO IMÓVEL: </Text>
            <TextInputMask
              type="only-numbers"
              style={styles.input}
              keyboardType="numeric"
              value={houseNumber}
              onChangeText={(txt) => setHouseNumber(txt)}
            />

            <Text style={styles.label}>BAIRRO DO IMÓVEL: </Text>
            <TextInput
              style={styles.input}
              value={houseNeighborhood}
              onChangeText={(txt) => setHouseNeighborhood(txt)}
            />

            <Text style={styles.label}>CIDADE DO IMÓVEL: </Text>
            <TextInput
              style={styles.input}
              value={houseCity}
              onChangeText={(txt) => setHouseCity(txt)}
            />

            <Text style={styles.label}>UF DO IMÓVEL: </Text>
            <TouchableOpacity style={styles.picker} activeOpacity={1}>
              <Picker
                style={styles.picker}
                mode="dropdown"
                dropdownIconColor={"#fff"}
                itemStyle={styles.picker}
                selectedValue={houseState}
                onValueChange={(itemValue, itemIndex) => {
                  setHouseState(itemValue);
                }}
              >
                <Picker.Item label="Acre" value="ac" />
                <Picker.Item label="Alagoas" value="al" />
                <Picker.Item label="Amapá" value="ap" />
                <Picker.Item label="Amazonas" value="am" />
                <Picker.Item label="Bahia" value="ba" />
                <Picker.Item label="Ceará" value="ce" />
                <Picker.Item label="Distrito Federal" value="df" />
                <Picker.Item label="Espírito Santo" value="es" />
                <Picker.Item label="Goiás" value="go" />
                <Picker.Item label="Maranhão" value="ma" />
                <Picker.Item label="Mato Grosso" value="mt" />
                <Picker.Item label="Mato Grosso do Sul" value="ms" />
                <Picker.Item label="Minas Gerais" value="mg" />
                <Picker.Item label="Pará" value="pa" />
                <Picker.Item label="Paraíba" value="pb" />
                <Picker.Item label="Paraná" value="pr" />
                <Picker.Item label="Pernambuco" value="pe" />
                <Picker.Item label="Piauí" value="pi" />
                <Picker.Item label="Rio de Janeiro" value="rj" />
                <Picker.Item label="Rio Grande do Norte" value="rn" />
                <Picker.Item label="Rio Grande do Sul" value="rs" />
                <Picker.Item label="Rondônia" value="ro" />
                <Picker.Item label="Roraima" value="rr" />
                <Picker.Item label="Santa Catarina" value="sc" />
                <Picker.Item label="São Paulo" value="sp" />
                <Picker.Item label="Sergipe" value="se" />
                <Picker.Item label="Tocantins" value="to" />
              </Picker>
            </TouchableOpacity>

            <View style={styles.divider} />

            <Text style={styles.label}>TIPO DO IMÓVEL: </Text>
            <TouchableOpacity style={styles.picker} activeOpacity={1}>
              <Picker
                style={styles.picker}
                mode="dropdown"
                dropdownIconColor={"#fff"}
                itemStyle={styles.picker}
                selectedValue={houseType}
                onValueChange={(itemValue, itemIndex) => {
                  setHouseType(itemValue);
                }}
              >
                <Picker.Item label="Casa" value="casa" />
                <Picker.Item label="Ponto Comercial" value="comercio" />
              </Picker>
            </TouchableOpacity>

            <Text style={styles.label}>VALOR MENSAL DO ALUGUEL: </Text>
            <TextInputMask
              type="money"
              options={{
                precision: 2,
                separator: ",",
                delimiter: ".",
                unit: "R$",
                suffixUnit: "",
              }}
              style={styles.input}
              value={housePayment}
              onChangeText={(txt) => setHousePayment(txt)}
            />

            <Text style={styles.label}>DIA DE PAGAMENTO DO ALUGUEL: </Text>
            <TextInputMask
              type="custom"
              options={{
                mask: "99",
              }}
              checkText={(previous, next) => {
                if (next.startsWith("0") || Number(next) >= 32) {
                  return false;
                } else {
                  return true;
                }
              }}
              keyboardType="numeric"
              style={styles.input}
              value={
                housePaymentDay <= 0 || housePaymentDay >= 32
                  ? ""
                  : housePaymentDay?.toString()
              }
              onChangeText={(txt) => setHousePaymentDay(Number(txt))}
            />

            <View style={styles.divider} />

            <Text style={styles.label}>INÍCIO DA LOCAÇÃO: </Text>
            <TouchableOpacity
              style={styles.input}
              activeOpacity={1}
              onPress={showDatePicker}
            >
              <Text style={styles.dateValueTxt}>
                {date.toLocaleDateString("pt-BR")}
              </Text>
            </TouchableOpacity>

            <Text style={styles.label}>TEMPO DE CONTRATO (em meses): </Text>
            <TextInputMask
              type="custom"
              options={{
                mask: "99",
              }}
              checkText={(previous, next) => {
                if (next.startsWith("0")) {
                  return false;
                } else {
                  return true;
                }
              }}
              style={styles.input}
              keyboardType="number-pad"
              editable
              value={monthTime <= 0 ? "" : monthTime?.toString()}
              onChangeText={(txt) => onChangeMonthTime(txt)}
            />

            <Text style={styles.datePreviewTxt}>
              {previewDate == null
                ? ""
                : `O término da locação será em ${previewDate}`}
            </Text>

            { 
            !isLoading ? 
            <TouchableOpacity
              style={styles.button}
              activeOpacity={0.8}
              onPress={handleCreatePDF}
            >
              <Text style={styles.btnText}>CRIAR CONTRATO</Text>
            </TouchableOpacity> 
            :
            <ActivityIndicator color="#1976d2" size="large" />
            }
          </SafeAreaView>
        </View>
      </View>
    </ScrollView>
  );
}
